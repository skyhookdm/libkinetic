bkv> yes
Yes Mode in ON
bkv> echo

bkv> echo Put tests
Put tests
bkv> put bkv.sanity.put.1 Put1.0
bkv> put bkv.sanity.put.1 Put1.1
bkv> put bkv.sanity.put.1 Put1.2
bkv> echo Put using a file as a value
Put using a file as a value
bkv> put -f /etc/hosts bkv.sanity.put.2
bkv> echo Put using a 4k zero filled buffer as a value
Put using a 4k zero filled buffer as a value
bkv> put -z 4096 bkv.sanity.put.3
bkv> echo Put even 3MiB value, should take 3 keys
Put even 3MiB value, should take 3 keys
bkv> put -l -z 3145728 bkv.sanity.large-3MiB
Put 3 keys
bkv> echo Put even 3MiB value, should take 3 keys but last key should be partial
Put even 3MiB value, should take 3 keys but last key should be partial
bkv> put -l -z 3140004 bkv.sanity.large-sub3MiB
Put 3 keys
bkv> echo Put error cases
Put error cases
bkv> put -z 3145728 bkv.sanity.4
*** zlen too long (3145728 > 1048576)
bkv> put -z -256 bkv.sanity.4
*** Negative zlen -256
Usage: ./bkv [..] put [CMD OPTIONS] KEY VALUE

Where, CMD OPTIONS are [default]:
	-f filename  Construct a value from a file
	-l           Put a large value spanning keys
	-z len       Construct a length len value of 0s
	-?           Help

Where, KEY and VALUE are quoted strings that can contain arbitrary
hexidecimal escape sequences to encode binary characters.
Only \xHH escape sequences are converted, ex \xF8.
If a conversion fails the command terminates.

For -l, the value length to be stored will not fit into a
single key. KEY is the base key and keys are generated by appending
an increasing sequence number to KEY until the entire value is
stored. Ex. if KEY is "mykey", then the first key stored is
"mykey.000". Used in conjunction with get -n <count>.

To see available COMMON OPTIONS: ./kctl -?
bkv> put -f /etc/hosts -z 3145728 bkv.sanity.4
**** No -f and -z
Usage: ./bkv [..] put [CMD OPTIONS] KEY VALUE

Where, CMD OPTIONS are [default]:
	-f filename  Construct a value from a file
	-l           Put a large value spanning keys
	-z len       Construct a length len value of 0s
	-?           Help

Where, KEY and VALUE are quoted strings that can contain arbitrary
hexidecimal escape sequences to encode binary characters.
Only \xHH escape sequences are converted, ex \xF8.
If a conversion fails the command terminates.

For -l, the value length to be stored will not fit into a
single key. KEY is the base key and keys are generated by appending
an increasing sequence number to KEY until the entire value is
stored. Ex. if KEY is "mykey", then the first key stored is
"mykey.000". Used in conjunction with get -n <count>.

To see available COMMON OPTIONS: ./kctl -?
bkv> echo

bkv> echo Get tests
Get tests
bkv> get bkv.sanity.put.1
Key(16):
bkv.sanity.put.1
Value(6):
Put1.2
bkv> get -A bkv.sanity.put.1
Key(16):
bkv.sanity.put.1
Value(6):
Put1.2
bkv> get -X bkv.sanity.put.3
Key(16):
00000000 62 6B 76 2E 73 61 6E 69 74 79 2E 70 75 74 2E 33  |  bkv.sanity.put.3
Value(4096):
00000000 62 6B 76 2E 73 61 6E 69 74 79 2E 70 75 74 2E 33  |  bkv.sanity.put.3
00000010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |  ................
Line repeated 254 time(s)
bkv> get -X -n 3 bkv.sanity.large-3MiB
Key(21):
00000000 62 6B 76 2E 73 61 6E 69 74 79 2E 6C 61 72 67 65  |  bkv.sanity.large
00000010 2D 33 4D 69 42                                   |  -3MiB
Value(3145728):
00000000 62 6B 76 2E 73 61 6E 69 74 79 2E 6C 61 72 67 65  |  bkv.sanity.large
00000010 2D 33 4D 69 42 00 00 00 00 00 00 00 00 00 00 00  |  -3MiB...........
00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |  ................
Line repeated 196605 time(s)
bkv> get -X -n 3 bkv.sanity.large-sub3MiB
Key(24):
00000000 62 6B 76 2E 73 61 6E 69 74 79 2E 6C 61 72 67 65  |  bkv.sanity.large
00000010 2D 73 75 62 33 4D 69 42                          |  -sub3MiB
Value(3140004):
00000000 62 6B 76 2E 73 61 6E 69 74 79 2E 6C 61 72 67 65  |  bkv.sanity.large
00000010 2D 73 75 62 33 4D 69 42 00 00 00 00 00 00 00 00  |  -sub3MiB........
00000020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |  ................
    Last line repeated 196247 time(s)
002fe9a0 00 00 00 00                                      |  ....
bkv> echo Get error case, no key
Get error case, no key
bkv> get bkv.sanity.nokey
get: No key found.
bkv> echo Get error case, more keys then present
Get error case, more keys then present
bkv> get -n 5 bkv.sanity.large-3MiB
get: No key found.
bkv> echo Get error case, key count too high
Get error case, key count too high
bkv> get -n 512 bkv.sanity.large-3MiB
*** count too big (512 > 256)
bkv> echo Get error case, key negative
Get error case, key negative
bkv> get -n -512 bkv.sanity.large-3MiB
*** Negative count -512
Usage: ./bkv [..] get [CMD OPTIONS] KEY

Where, CMD OPTIONS are [default]:
	-n count     Get a single value assembled from count KEYs
	-A           Dumps key/value as ascii w/escape seqs
	-X           Dumps key/value as both hex and ascii
	-?           Help

Where, KEY is a quoted string that can contain arbitrary
hexidecimal escape sequences to encode binary characters.
Only \xHH escape sequences are converted, ex \xF8.
If a conversion fails the command terminates.

For -n <count>, KEY is the base key and <count> keys are retrieved
by appending an increasing sequence number to KEY. Ex. if KEY is
"mykey", then the first key retrieved is "mykey.000". Used in
conjunction with put -l.

By default keys and values are printed as raw strings,
including special/nonprintable chars

To see available COMMON OPTIONS: ./kctl -?
bkv> echo Get error case, flags misuse
Get error case, flags misuse
bkv> get -A -X bkv.sanity.put.2
*** -X and -A are exclusive
Usage: ./bkv [..] get [CMD OPTIONS] KEY

Where, CMD OPTIONS are [default]:
	-n count     Get a single value assembled from count KEYs
	-A           Dumps key/value as ascii w/escape seqs
	-X           Dumps key/value as both hex and ascii
	-?           Help

Where, KEY is a quoted string that can contain arbitrary
hexidecimal escape sequences to encode binary characters.
Only \xHH escape sequences are converted, ex \xF8.
If a conversion fails the command terminates.

For -n <count>, KEY is the base key and <count> keys are retrieved
by appending an increasing sequence number to KEY. Ex. if KEY is
"mykey", then the first key retrieved is "mykey.000". Used in
conjunction with put -l.

By default keys and values are printed as raw strings,
including special/nonprintable chars

To see available COMMON OPTIONS: ./kctl -?
bkv> echo

bkv> echo Exists tests
Exists tests
bkv> exists bkv.sanity.put.1
Key exists
bkv> exists bkv.sanity.put.nokey
Key doesn't exist
bkv> echo

bkv> echo Del tests
Del tests
bkv> del bkv.sanity.put.1
***DELETING Key: bkv.sanity.put.1
bkv> del bkv.sanity.put.2
***DELETING Key: bkv.sanity.put.2
bkv> del bkv.sanity.put.3
***DELETING Key: bkv.sanity.put.3
bkv> del -n 3 bkv.sanity.large-3MiB
***DELETING 3 Key(s): bkv.sanity.large-3MiB
bkv> del -n 3 bkv.sanity.large-sub3MiB
***DELETING 3 Key(s): bkv.sanity.large-sub3MiB
bkv> echo Del error case, no key
Del error case, no key
bkv> del bkv.sanity.put.nokey
del: Key not found.
bkv> echo Del error case, negative count
Del error case, negative count
bkv> del -n -3 bkv.sanity.large-sub3MiB
*** Negative count -3
Usage: ./bkv [..] del [CMD OPTIONS] KEY

Where, CMD OPTIONS are [default]:
	-n count     Delete <count> keys using common base key, KEY
	-?           Help

Where, KEY is a quoted string that can contain arbitrary
hexidecimal escape sequences to encode binary characters.
Only \xHH escape sequences are converted, ex \xF8.
If a conversion fails the command terminates.

For -n <count>, KEY is the base key and <count> keys are deleted
by appending an increasing sequence number to KEY. Ex. if KEY is
"mykey", then the first key deleted is "mykey.000". Used in
conjunction with put -l.

To see available COMMON OPTIONS: ./kctl -?
bkv> echo

bkv> echo Limits test
Limits test
bkv> limits
Limits:
	Max Key Length: 1024
	Max Val Length: 1048576
	Max N:          256
bkv> quit
